{% macro RunbookTemplate(runbook_name, vm_ip) -%}
# THIS FILE IS AUTOMATICALLY GENERATED.
"""
Sample Calm DSL for {{runbook_name}} runbook

The top-level folder contains the following files:
{{runbook_name}}Runbook/
├── runbook.py
└── scripts
    └── cleanup_logs.sh

On run, this runbook does the following:
  1. Checks if logs folder exists on the given VM or not
  2. If not, then exits successfully, printing "Given Logs Directory doesn't exists"
  3. If yes, then clean up old logs on the given vm.
  4. And prints the size logs folder after cleanup.

Useful commands (execute from top-level directory):
  1. calm compile runbook --file {{runbook_name}}Runbook/runbook.py
  2. calm create runbook --file {{runbook_name}}Runbook/runbook.py --name <runbook_name>
  3. calm get runbooks --name <runbook_name>
  4. calm describe runbook <runbook_name>
  5. calm run runbook <runbook_name> -w
  6. calm get runbook_executions
  7. calm delete runbook <runbook_name>
  8. calm watch runbook_execution <RUNLOG_UUID>
  9. calm pause runbook_execution <RUNLOG_UUID>
  10. calm resume runbook_execution <RUNLOG_UUID>
  11. calm abort runbook_execution <RUNLOG_UUID>

"""

from calm.dsl.runbooks import RunbookVariable as Variable
from calm.dsl.runbooks import RunbookTask as Task, CalmEndpoint as Endpoint
from calm.dsl.runbooks import runbook, ref, basic_cred


# Create Endpoints
Cred = basic_cred("username", "password", name="endpoint_cred")
LinuxEndpoint = Endpoint.Linux.ip(["{{vm_ip}}"], cred=Cred)


@runbook
def {{runbook_name}}(endpoints=[LinuxEndpoint]):
    """ Sample runbook for {{runbook_name}} """

    # Defining size limit for logs cleanup
    size_limit = Variable.Simple.int("102400", runtime=True)    # noqa
    log_path = Variable.Simple.string("/var/log", runtime=True)  # noqa

    # Decision Task to check if logs folder is present or not
    with Task.Decision.ssh(name="DecisionTask", script="cd @@{log_path}@@") as d:

        if d.exit_code == 0:
            Task.SetVariable.ssh(
                name="StoreLogsSizeBeforeCleanup",
                script="""echo "size_before_cleanup="$(du -d 0 @@{log_path}@@ | awk  "{print $1}")""",
                variables=["size_before_cleanup"],
            )
            Task.Exec.ssh(name="Cleanup", filename="scripts/cleanup_logs.sh")
            Task.SetVariable.ssh(
                name="StoreLogsSizeAfterCleanup",
                script="""echo "size_after_cleanup="$(du -d 0 @@{log_path}@@ | awk  "{print $1}")""",
                variables=["size_after_cleanup"],
            )
            Task.Exec.escript(
                name="FinalOutput",
                script="print 'logs size changed from @@{size_before_cleanup}@@ => @@{size_after_cleanup}@@'",
                target=ref(endpoints[0]),
            )

        if d.exit_code == 1:
            Task.Exec.escript(
                script='''print "Given Logs Directory doesn't exists"'''
            )

{%- endmacro %}


{{RunbookTemplate(runbook_name, vm_ip)}}
