# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

from calm.dsl.builtins import *  # no_qa

# Secret Variables
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
Profile_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_variable_REDIS_CONFIG_PASSWORD"
)

# Credentials
BP_CRED_CENTOS = basic_cred(
    "centos", BP_CRED_CENTOS_KEY, name="SSHUSER", type="KEY", default=True
)


AHV_CENTOS_78 = vm_disk_package(
    name="AHV_CENTOS_78",
    description="",
    config={
        "image": {
            "name": "CENTOS-7-x86_64-2003",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "", "version": ""},
        "checksum": {},
    },
)

ESX_CENTOS_78 = vm_disk_package(
    name="ESX_CENTOS_78",
    description="",
    config={
        "image": {
            "name": "CENTOS-7-x86_64-2003",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.ova",
            "architecture": "X86_64",
        },
        "product": {"name": "", "version": ""},
        "checksum": {},
    },
)


class Redis_Master(Service):
    """Redis_Master Service description"""

    pass


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_78, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(10),
    ]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename="specs/vmcalm_array_indexcalm_time_cloud_init_data.yaml"
    )


class RedisMaster_provider_spec(AhvVm):
    name = "RedisMaster-@@{calm_random}@@"
    resources = vmcalm_array_indexcalm_timeResources

class RedisSlave_provider_spec(RedisMaster_provider_spec):
    name = "RedisSlave-@@{calm_random}@@"


class RedisMaster(Substrate):
    """RedisMaster Substrate"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = RedisMaster_provider_spec
    provider_spec_editables = read_spec("specs/RedisMaster_create_spec_editables.yaml")
    readiness_probe = readiness_probe(credential=ref(BP_CRED_CENTOS), disabled=False)
     
 
class RedisSlave(RedisMaster):
    """RedisSlave Substrate"""
    provider_spec = RedisSlave_provider_spec
    


class RedisMasterAWS(RedisMaster):
    """RedisMasterAWS Substrate"""

    provider_type = "AWS_VM"
    provider_spec = read_provider_spec("specs/RedisMasterAWS_provider_spec.yaml")
    provider_spec.spec["name"] = "RedisMaster-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisMasterAWS_create_spec_editables.yaml"
    )


class RedisSlaveAWS(RedisMasterAWS):
    """RedisSlaveAWS Substrate"""

    provider_spec = read_provider_spec("specs/RedisSlaveAWS_provider_spec.yaml")
    provider_spec.spec["name"] = "RedisSlave-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisSlaveAWS_create_spec_editables.yaml"
    )


class RedisGCPMaster(RedisMaster):
    """RedisGCPMaster Substrate"""

    provider_type = "GCP_VM"
    provider_spec = read_provider_spec("specs/RedisGCPMaster_provider_spec.yaml")
    provider_spec.spec["resources"]["name"] = "redismaster-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisGCPMaster_create_spec_editables.yaml"
    )

    

class RedisGCPSlave(RedisGCPMaster):
    """RedisGCPSlave Substrate"""
    provider_spec = read_provider_spec("specs/RedisGCPSlave_provider_spec.yaml")
    provider_spec.spec["resources"]["name"] = "redisslave-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisGCPSlave_create_spec_editables.yaml"
    )
   


class RedisMasterAzure(RedisMaster):
    """RedisMasterAzure Substrate"""

    provider_type = "AZURE_VM"
    provider_spec = read_provider_spec("specs/RedisMasterAzure_provider_spec.yaml")
    provider_spec.spec["resources"]["vm_name"] = "RedisMaster-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisMasterAzure_create_spec_editables.yaml"
    )

class RedisSlaveAzure(RedisMasterAzure):
    """RedisSlaveAzure Substrate"""

    provider_spec = read_provider_spec("specs/RedisSlaveAzure_provider_spec.yaml")
    provider_spec.spec["resources"]["vm_name"] = "RedisSlave-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisSlaveAzure_create_spec_editables.yaml"
    )
    
class RedisMasterVMWare(RedisMaster):
    """RedisMasterVMWare Substrate"""

    provider_type = "VMWARE_VM"
    provider_spec = read_vmw_spec("specs/RedisMasterVMWare_provider_spec.yaml", vm_template=ESX_CENTOS_78)
    provider_spec.spec["name"] = "RedisMaster-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisMasterVMWare_create_spec_editables.yaml"
    )

class RedisSlaveVMWare(RedisMasterVMWare):
    """RedisSlaveVMWare Substrate"""

    provider_spec = read_vmw_spec("specs/RedisSlaveVMWare_provider_spec.yaml", vm_template=ESX_CENTOS_78)
    provider_spec.spec["name"] = "RedisSlave-@@{calm_random}@@"
    provider_spec_editables = read_spec(
        "specs/RedisSlaveVMWare_create_spec_editables.yaml"
    )

class Redis_Slave(Service):
    """Redis_Slave Service"""
    dependencies = [ref(Redis_Master)]


class RedisMasterPackage(Package):
    """RedisMasterPackage Package"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_RedisMasterPackage_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackage),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisMasterPackage_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackage),
        )


class RedisMasterPackageAWS(Package):
    """RedisMasterPackageAWS Package"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis  Master Install and Configure",
            filename="scripts/Package_RedisMasterPackageAWS_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackageAWS),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisMasterPackageAWS_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackageAWS),
        )


class RedisMasterGCPPackage(Package):
    """RedisMasterGCPPackage Package"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_RedisMasterGCPPackage_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class PackageMasterAZure(Package):
    """PackageMasterAZure Package"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_PackageMasterAZure_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class PackageMasterVMWare(Package):
    """PackageMasterVMWare Package"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_PackageMasterVMWare_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class RedisSlavePackage(Package):
    """RedisSlavePackage Package"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlavePackage_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackage),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisSlavePackage_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackage),
        )


class RedisSlavePackageAWS(Package):
    """RedisSlavePackageAWS Package"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlavePackageAWS_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackageAWS),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisSlavePackageAWS_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackageAWS),
        )


class RedisSlaveGCPPackage(Package):
    """RedisSlaveGCPPackage Package"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlaveGCPPackage_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class PackageSlaveAZure(Package):
    """PackageSlaveAZure Package"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_PackageSlaveAZure_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class PackageSlaveVMWare(Package):
    """PackageSlaveVMWare Package"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_PackageSlaveVMWare_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class RedisMasterAHVDeployment(Deployment):
    """RedisAHVDeployment"""

    name = "RedisAHVDeployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterPackage)]
    substrate = ref(RedisMaster)


class RedisMasterAWSDeployment(Deployment):
    """RedisAWSDeployment"""

    name = "RedisAWSDeployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterPackageAWS)]
    substrate = ref(RedisMasterAWS)


class RedisMasterGCPDeployment(Deployment):
    """RedisGCPDeployment"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterGCPPackage)]
    substrate = ref(RedisGCPMaster)


class RedisMasterAzureDeployment(Deployment):
    """RedisAzureDeployment"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(PackageMasterAZure)]
    substrate = ref(RedisMasterAzure)


class RedisMasterVMwareDeployment(Deployment):
    """RedisVMwareDeployment"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(PackageMasterVMWare)]
    substrate = ref(RedisMasterVMWare)


class RedisSlaveAHVDeployment(Deployment):
    """RedisSlaveAHVDeployment"""

    name = "RedisSlaveAHVDeployment"
    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlavePackage)]
    substrate = ref(RedisSlave)


class RedisSlaveAWSDeployment(Deployment):
    """RedisSlaveAWSDeployment"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlavePackageAWS)]
    substrate = ref(RedisSlaveAWS)


class RedisSlaveGCPDeployment(Deployment):
    """RedisSlaveGCPDeployment"""

    name = "RedisSlaveGCPDeployment"
    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlaveGCPPackage)]
    substrate = ref(RedisGCPSlave)


class RedisSlaveAzureDeployment(Deployment):
    """RedisSlaveAzureDeployment"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(PackageSlaveAZure)]
    substrate = ref(RedisSlaveAzure)


class RedisSlaveVMwareDeployment(Deployment):
    """RedisSlaveVMwareDeployment"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(PackageSlaveVMWare)]
    substrate = ref(RedisSlaveVMWare)


class Nutanix(Profile):
    """Nutanix Profile"""

    deployments = [RedisMasterAHVDeployment, RedisSlaveAHVDeployment]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        Scaleout = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{Scaleout}@@", name="Scaleout", target=ref(RedisSlaveAHVDeployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(RedisSlaveAHVDeployment)
        )


class AWS(Nutanix):
    """AWS Profile"""

    deployments = [RedisMasterAWSDeployment, RedisSlaveAWSDeployment]
    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(RedisSlaveAWSDeployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(RedisSlaveAWSDeployment)
        )


class GCP(Nutanix):
    """GCP Profile"""

    deployments = [RedisMasterGCPDeployment, RedisSlaveGCPDeployment]

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(RedisSlaveGCPDeployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(RedisSlaveGCPDeployment)
        )


class Azure(Nutanix):
    """Azure Profile"""

    deployments = [RedisMasterAzureDeployment, RedisSlaveAzureDeployment]

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        CalmTask.Scaling.scale_out("1", name="Task1", target=ref(RedisSlaveAzureDeployment))

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        CalmTask.Scaling.scale_in("1", name="Task1", target=ref(RedisSlaveAzureDeployment))


class VMware(Nutanix):
    """VMware Profile"""

    deployments = [RedisMasterVMwareDeployment, RedisSlaveVMwareDeployment]

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        CalmTask.Scaling.scale_out(
            "1", name="ScaleOut", target=ref(RedisSlaveVMwareDeployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        CalmTask.Scaling.scale_in(
            "1", name="ScaleIn", target=ref(RedisSlaveVMwareDeployment)
        )


class Redis_Cluster(Blueprint):
    """Accessibility:
* redis-cli from master host"""

    services = [Redis_Master, Redis_Slave]
    packages = [
        RedisMasterPackage,
        RedisSlavePackage,
        RedisMasterPackageAWS,
        RedisSlavePackageAWS,
        AHV_CENTOS_78,
        RedisMasterGCPPackage,
        RedisSlaveGCPPackage,
        PackageMasterAZure,
        PackageSlaveAZure,
        ESX_CENTOS_78,
        PackageMasterVMWare,
        PackageSlaveVMWare,
    ]
    substrates = [
        RedisMaster,
        RedisSlave,
        RedisMasterAWS,
        RedisSlaveAWS,
        RedisGCPMaster,
        RedisGCPSlave,
        RedisMasterAzure,
        RedisSlaveAzure,
        RedisMasterVMWare,
        RedisSlaveVMWare,
    ]
    profiles = [Nutanix, AWS, GCP, Azure, VMware]
    credentials = [BP_CRED_CENTOS]
