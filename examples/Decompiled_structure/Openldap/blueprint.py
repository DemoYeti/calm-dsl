# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_SSHUSER_KEY = read_local_file("BP_CRED_SSHUSER_KEY")
Profile_Nutanix_variable_OPENLDAP_PASSWORD = read_local_file(
    "Profile_Nutanix_variable_OPENLDAP_PASSWORD"
)
Profile_Nutanix_variable_ADMIN_PASSWORD = read_local_file(
    "Profile_Nutanix_variable_ADMIN_PASSWORD"
)
Profile_Nutanix_variable_READONLY_PASSWORD = read_local_file(
    "Profile_Nutanix_variable_READONLY_PASSWORD"
)

# Credentials
BP_CRED_SSHUSER = basic_cred(
    "centos",
    BP_CRED_SSHUSER_KEY,
    name="SSHUSER",
    type="KEY",
    default=True,
    editables={"username": True, "secret": True},
)


AHV_CENTOS_78 = vm_disk_package(
    name="AHV_CENTOS_78",
    description="",
    config={
        "image": {
            "name": "CENTOS-7-x86_64-2003",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {},
        "checksum": {},
    },
)


class OpenLDAPServer(Service):
    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Install and Configure Openldap",
            filename=os.path.join(
                "scripts",
                "Service_OpenLDAPServer_Action___create___Task_InstallandConfigureOpenldap.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(OpenLDAPServer),
        )


class OpenLDAPServercalm_uniqueResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "OpenLDAPServercalm_unique_cloud_init_data.yaml")
    )


class OpenLDAPServercalm_unique(AhvVm):

    name = "OpenLDAPServer@@{calm_unique}@@"
    resources = OpenLDAPServercalm_uniqueResources


class OpenLDAP(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = OpenLDAPServercalm_unique
    provider_spec_editables = read_spec(
        os.path.join("specs", "OpenLDAP_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)


class AddUserSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "AddUserSubstrate_provider_spec.yaml")
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "AddUserSubstrate_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)


class OpenLDAPClientResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "OpenLDAPClient_cloud_init_data.yaml")
    )


class OpenLDAPClient(AhvVm):

    resources = OpenLDAPClientResources


class LDAPClientVM(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = OpenLDAPClient
    provider_spec_editables = read_spec(
        os.path.join("specs", "LDAPClientVM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)


class OpenLDAPGUIcalm_uniqueResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_78, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "OpenLDAPGUIcalm_unique_cloud_init_data.yaml")
    )


class OpenLDAPGUIcalm_unique(AhvVm):

    name = "OpenLDAPGUI@@{calm_unique}@@"
    resources = OpenLDAPGUIcalm_uniqueResources


class OpenLDAPGUI(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = OpenLDAPGUIcalm_unique
    provider_spec_editables = read_spec(
        os.path.join("specs", "OpenLDAPGUI_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)

class AddUser(Service):

    dependencies = [ref(OpenLDAPServer)]

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Add OpenLDAP User",
            filename=os.path.join(
                "scripts", "Service_AddUser_Action___create___Task_AddOpenLDAPUser.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(AddUser),
        )


class OpenLDAPGUIService(Service):

    dependencies = [ref(OpenLDAPServer)]

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Install and Configure Openldap GUI Service",
            filename=os.path.join(
                "scripts",
                "Service_OpenLDAPGUIService_Action___create___Task_InstallandConfigureOpenldapGUIService.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(OpenLDAPGUIService),
        )


class OpenLDAPConfiguration(Package):

    services = [ref(OpenLDAPServer)]


class LDAPClient(Service):

    dependencies = [ref(AddUser)]

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Configure LDAP",
            filename=os.path.join(
                "scripts", "Service_LDAPClient_Action___create___Task_ConfigureLDAP.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(LDAPClient),
        )


class AddUserPackage(Package):

    services = [ref(AddUser)]


class OpenLDAPGUIPackage(Package):

    services = [ref(OpenLDAPGUIService)]


class OpenLDAPDeployment(Deployment):

    name = "OpenLDAPDeployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(OpenLDAPConfiguration)]
    substrate = ref(OpenLDAP)


class LDAPClientPackage(Package):

    services = [ref(LDAPClient)]


class AddUserDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(AddUserPackage)]
    substrate = ref(AddUserSubstrate)


class OpenLDAPGUIDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(OpenLDAPGUIPackage)]
    substrate = ref(OpenLDAPGUI)


class LDAPClientDeployment(Deployment):

    name = "LDAPClientDeployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(LDAPClientPackage)]
    substrate = ref(LDAPClientVM)


class Nutanix(Profile):

    deployments = [
        OpenLDAPDeployment,
        AddUserDeployment,
        OpenLDAPGUIDeployment,
        LDAPClientDeployment,
    ]

    OPENLDAP_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_OPENLDAP_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    CERTIFICATE_COUNTRY = CalmVariable.Simple(
        "IN",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    CERTIFICATE_STATE = CalmVariable.Simple(
        "Karnataka",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    CERTIFICATE_CITY = CalmVariable.Simple(
        "Bangalore",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    ADMIN_USER = CalmVariable.Simple(
        "admin",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    READONLY_USER = CalmVariable.Simple(
        "clusterviewer",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    ADMIN_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_ADMIN_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    READONLY_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_READONLY_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    SECOND_LEVEL_DOMAIN_NAME = CalmVariable.Simple(
        "ntnxdemo",
        label="",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Ex: nutanix, calm, example etc",
    )

    TOP_LEVEL_DOMAIN_NAME = CalmVariable.Simple(
        "local",
        label="",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Ex: local, com, in etc",
    )

    @action
    def DeleteLDAPUser():
        """This action used to delete existing users in openldap"""

        UID = CalmVariable.Simple(
            "john",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="DeleteUserScript",
            filename=os.path.join(
                "scripts",
                "Profile_Nutanix_Action_DeleteLDAPUser_Task_DeleteUserScript.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(OpenLDAPServer),
        )

    @action
    def CreateLDAPUser():
        """This action is used to create new users in openldap"""

        OBJECT_CLASS = CalmVariable.Simple(
            "inetOrgPerson",
            label="",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Ex: Enter the required user object class here by default it is inetOrgPerson",
        )
        ADD_FIRST_NAME = CalmVariable.Simple(
            "john",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        ADD_SECOND_NAME = CalmVariable.Simple(
            "m",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        UID = CalmVariable.Simple(
            "john",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        ROLE = CalmVariable.Simple(
            "Solutions Architect",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        PASSWORD = CalmVariable.Simple(
            "nutanix/4u",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="CreateUserScript",
            filename=os.path.join(
                "scripts",
                "Profile_Nutanix_Action_CreateLDAPUser_Task_CreateUserScript.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(OpenLDAPServer),
        )


class Openldap(Blueprint):
    """Accessibility:
* Command line"""

    services = [OpenLDAPServer, AddUser, LDAPClient, OpenLDAPGUIService]
    packages = [
        OpenLDAPConfiguration,
        AddUserPackage,
        LDAPClientPackage,
        OpenLDAPGUIPackage,
        AHV_CENTOS_78,
    ]
    substrates = [OpenLDAP, AddUserSubstrate, LDAPClientVM, OpenLDAPGUI]
    profiles = [Nutanix]
    credentials = [BP_CRED_SSHUSER]
