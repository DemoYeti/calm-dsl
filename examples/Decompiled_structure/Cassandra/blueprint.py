# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_SSHUSER_KEY = read_local_file("BP_CRED_SSHUSER_KEY")

# Credentials
BP_CRED_SSHUSER = basic_cred(
    "centos",
    BP_CRED_SSHUSER_KEY,
    name="SSHUSER",
    type="KEY",
    default=True,
    editables={"username": True, "secret": True},
)


AHV_CENTOS_78 = vm_disk_package(
    name="AHV_CENTOS_78",
    description="",
    config={
        "image": {
            "name": "CENTOS-7-x86_64-2003",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.qcow2",
            "architecture": "X86_64",
        },
        "product": {},
        "checksum": {},
    },
)

ESX_CENTOS_78 = vm_disk_package(
    name="ESX_CENTOS_78",
    description="",
    config={
        "image": {
            "name": "CENTOS-7-x86_64-2003",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-2003.ova",
            "architecture": "X86_64",
        },
        "product": {},
        "checksum": {},
    },
)


class Cassandra(Service):
    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Install and Configure Cassandra Cluster",
            filename=os.path.join(
                "scripts",
                "Service_Cassandra_Action___create___Task_InstallandConfigureCassandraCluster.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )


class Cassandra_VMcalm_randomResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_78, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(30),
    ]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "Cassandra_VMcalm_random_cloud_init_data.yaml")
    )


class Cassandra_VMcalm_random(AhvVm):

    name = "Cassandra_VM-@@{calm_random}@@"
    resources = Cassandra_VMcalm_randomResources


class CassandraAHV(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = Cassandra_VMcalm_random
    provider_spec_editables = read_spec(
        os.path.join("specs", "CassandraAHV_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)


class CassandraAWS(Substrate):

    os_type = "Linux"
    provider_type = "AWS_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "CassandraAWS_provider_spec.yaml")
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "CassandraAWS_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)

class CassandraGCP(Substrate):

    os_type = "Linux"
    provider_type = "GCP_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "CassandraGCP_provider_spec.yaml")
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "CassandraGCP_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)

class CassandraAzure(Substrate):

    os_type = "Linux"
    provider_type = "AZURE_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "CassandraAzure_provider_spec.yaml")
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "CassandraAzure_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)

class CassandraVMWare(Substrate):

    os_type = "Linux"
    provider_type = "VMWARE_VM"
    provider_spec = read_vmw_spec(
        os.path.join("specs", "CassandraVMWare_provider_spec.yaml"),
        vm_template=ESX_CENTOS_78,
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "CassandraVMWare_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(credential=ref(BP_CRED_SSHUSER), disabled=False)

class CassandraPackage(Package):

    services = [ref(Cassandra)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="BPG and Install Java",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackage_Action___install___Task_BPGandInstallJava.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackage),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackage_Action___uninstall___Task_PackageUninstallTask.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackage),
        )


class CassandraPackageAWS(Package):

    services = [ref(Cassandra)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="BPG and Install Java",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageAWS_Action___install___Task_BPGandInstallJava.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackageAWS),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageAWS_Action___uninstall___Task_PackageUninstallTask.sh",
            ),
            target=ref(CassandraPackageAWS),
        )


class CassandraPackageGCP(Package):

    services = [ref(Cassandra)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="BPG and Install Java",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageGCP_Action___install___Task_BPGandInstallJava.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )


class CassandraPackageAzure(Package):

    services = [ref(Cassandra)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install Java",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageAzure_Action___install___Task_InstallJava.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackageAzure),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageAzure_Action___uninstall___Task_PackageUninstallTask.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackageAzure),
        )


class CassandraPackageVMWare(Package):

    services = [ref(Cassandra)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Install Java",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageVMWare_Action___install___Task_InstallJava.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackageVMWare),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="PackageUninstallTask_cloned_1",
            filename=os.path.join(
                "scripts",
                "Package_CassandraPackageVMWare_Action___uninstall___Task_PackageUninstallTask_cloned_1.sh",
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(CassandraPackageVMWare),
        )


class CassandraDeploymentAHV(Deployment):

    name = "CassandraDeploymentAHV"
    min_replicas = "2"
    max_replicas = "4"
    default_replicas = "2"

    packages = [ref(CassandraPackage)]
    substrate = ref(CassandraAHV)
    editables = {"min_replicas": True, "default_replicas": False, "max_replicas": True}


class CassandraDeploymentAWS(Deployment):

    name = "CassandraDeploymentAWS"
    min_replicas = "2"
    max_replicas = "4"
    default_replicas = "2"

    packages = [ref(CassandraPackageAWS)]
    substrate = ref(CassandraAWS)
    editables = {"min_replicas": True, "default_replicas": False, "max_replicas": True}


class CassandraDeploymentGCP(Deployment):

    name = "CassandraDeploymentGCP"
    min_replicas = "2"
    max_replicas = "4"
    default_replicas = "2"

    packages = [ref(CassandraPackageGCP)]
    substrate = ref(CassandraGCP)


class CassandraDeploymentAzure(Deployment):

    name = "CassandraDeploymentAzure"
    min_replicas = "2"
    max_replicas = "4"
    default_replicas = "2"

    packages = [ref(CassandraPackageAzure)]
    substrate = ref(CassandraAzure)
    editables = {"min_replicas": True, "default_replicas": False, "max_replicas": True}


class CassandraDeploymentVMware(Deployment):

    name = "CassandraDeploymentVMware"
    min_replicas = "2"
    max_replicas = "4"
    default_replicas = "2"

    packages = [ref(CassandraPackageVMWare)]
    substrate = ref(CassandraVMWare)
    editables = {"min_replicas": True, "default_replicas": False, "max_replicas": True}


class Nutanix(Profile):

    deployments = [CassandraDeploymentAHV]

    CLUSTER_NAME = CalmVariable.Simple(
        "CLUSTER01",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DATA_PATH = CalmVariable.Simple(
        "/var/lib/cassandra/data",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleIn():
        """This action will scale in Cassandra instances by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(CassandraDeploymentAHV)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_cluster",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_ScaleIn_Task_Reconfigure_cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )

    @action
    def ScaleOut():
        """This action will scale out Cassandra instances by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(CassandraDeploymentAHV)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure Cluster",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_ScaleOut_Task_ReconfigureCluster.sh"
            ),
            target=ref(Cassandra),
        )


class AWS(Profile):

    deployments = [CassandraDeploymentAWS]

    CLUSTER_NAME = CalmVariable.Simple(
        "CLUSTER01",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DATA_PATH = CalmVariable.Simple(
        "/var/lib/cassandra/data",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Cassandra instances by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(CassandraDeploymentAWS)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_Cluster",
            filename=os.path.join(
                "scripts", "Profile_AWS_Action_ScaleOut_Task_Reconfigure_Cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )

    @action
    def ScaleIn():
        """This action will scale in Cassandra instances by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(CassandraDeploymentAWS)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_Cluster",
            filename=os.path.join(
                "scripts", "Profile_AWS_Action_ScaleIn_Task_Reconfigure_Cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )


class GCP(Profile):

    deployments = [CassandraDeploymentGCP]

    CLUSTER_NAME = CalmVariable.Simple(
        "CLUSTER01",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DATA_PATH = CalmVariable.Simple(
        "/var/lib/cassandra/data",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Cassandra instances by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(CassandraDeploymentGCP)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_Cluster",
            filename=os.path.join(
                "scripts", "Profile_GCP_Action_ScaleOut_Task_Reconfigure_Cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )

    @action
    def ScaleIn():
        """This action will scale in Cassandra instances by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(CassandraDeploymentGCP)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_Cluster",
            filename=os.path.join(
                "scripts", "Profile_GCP_Action_ScaleIn_Task_Reconfigure_Cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )


class Azure(Profile):

    deployments = [CassandraDeploymentAzure]

    CLUSTER_NAME = CalmVariable.Simple(
        "CLUSTER01",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DATA_PATH = CalmVariable.Simple(
        "/var/lib/cassandra/data",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleIn():
        """This action will scale in Cassandra instances by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(CassandraDeploymentAzure)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_cluster",
            filename=os.path.join(
                "scripts", "Profile_Azure_Action_ScaleIn_Task_Reconfigure_cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )

    @action
    def ScaleOut():
        """This action will scale out Cassandra instances by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(CassandraDeploymentAzure)
        )
        CalmTask.Exec.ssh(
            name="Reconfigure Cluster",
            filename=os.path.join(
                "scripts", "Profile_Azure_Action_ScaleOut_Task_ReconfigureCluster.sh"
            ),
            target=ref(Cassandra),
        )


class VMware(Profile):

    deployments = [CassandraDeploymentVMware]

    CLUSTER_NAME = CalmVariable.Simple(
        "CLUSTER01",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DATA_PATH = CalmVariable.Simple(
        "/var/lib/cassandra/data",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleIn():
        """This action will scale in Cassandra instances by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@",
            name="ScaleIn",
            target=ref(CassandraDeploymentVMware),
        )
        CalmTask.Exec.ssh(
            name="Reconfigure_cluster",
            filename=os.path.join(
                "scripts", "Profile_VMware_Action_ScaleIn_Task_Reconfigure_cluster.sh"
            ),
            cred=ref(BP_CRED_SSHUSER),
            target=ref(Cassandra),
        )

    @action
    def ScaleOut():
        """This action will scale out Cassandra instances by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@",
            name="ScaleOut",
            target=ref(CassandraDeploymentVMware),
        )
        CalmTask.Exec.ssh(
            name="Reconfigure Cluster",
            filename=os.path.join(
                "scripts", "Profile_VMware_Action_ScaleOut_Task_ReconfigureCluster.sh"
            ),
            target=ref(Cassandra),
        )


class CassandraBlueprint(Blueprint):
    """* Cassandra commandline cqlsh"""

    services = [Cassandra]
    packages = [
        CassandraPackage,
        CassandraPackageAWS,
        AHV_CENTOS_78,
        CassandraPackageGCP,
        CassandraPackageAzure,
        ESX_CENTOS_78,
        CassandraPackageVMWare,
    ]
    substrates = [
        CassandraAHV,
        CassandraAWS,
        CassandraGCP,
        CassandraAzure,
        CassandraVMWare,
    ]
    profiles = [Nutanix, AWS, GCP, Azure, VMware]
    credentials = [BP_CRED_SSHUSER]
