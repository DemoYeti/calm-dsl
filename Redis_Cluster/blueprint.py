# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

from calm.dsl.builtins import *  # no_qa

# Secret Variables
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
Profile_Nutanix_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_Nutanix_variable_REDIS_CONFIG_PASSWORD"
)
Profile_AWS_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_AWS_variable_REDIS_CONFIG_PASSWORD"
)
Profile_GCP_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_GCP_variable_REDIS_CONFIG_PASSWORD"
)
Profile_Azure_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_Azure_variable_REDIS_CONFIG_PASSWORD"
)
Profile_VMware_variable_REDIS_CONFIG_PASSWORD = read_local_file(
    "Profile_VMware_variable_REDIS_CONFIG_PASSWORD"
)

# Credentials
BP_CRED_CENTOS = basic_cred(
    "centos", BP_CRED_CENTOS_KEY, name="CENTOS", type="KEY", default=True
)


AHV_CENTOS_77 = vm_disk_package(
    name="AHV_CENTOS_77",
    description="",
    config={
        "image": {
            "name": "CENTOS_77",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-1908.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "", "version": ""},
        "checksum": {},
    },
)

ESX_CENTOS_77 = vm_disk_package(
    name="ESX_CENTOS_77",
    description="",
    config={
        "image": {
            "name": "CENTOS_77",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/Calm/CentOS-7-x86_64-1908.ova",
            "architecture": "X86_64",
        },
        "product": {"name": "", "version": ""},
        "checksum": {},
    },
)


class Redis_Master(Service):
    """Redis_Master Service description"""

    pass


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_77, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(10),
    ]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename="specs/vmcalm_array_indexcalm_time_cloud_init_data.yaml"
    )


class vmcalm_array_indexcalm_time(AhvVm):

    display_name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources


class v2mcalm_array_indexcalm_time(AhvVm):

    display_name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources

class RedisMaster(Substrate):
    """RedisMaster Substrate description"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time
    provider_spec_editables = read_spec("specs/RedisMaster_create_spec_editables.yaml")
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_CENTOS),
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(AHV_CENTOS_77, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(10),
    ]
    nics = [AhvVmNic.NormalNic.ingress("vlan.0", cluster="Goten-1")]

    guest_customization = AhvVmGC.CloudInit(
        filename="specs/vmcalm_array_indexcalm_time_cloud_init_data.yaml"
    )


class vmcalm_array_indexcalm_time(AhvVm):

    display_name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources


class RedisSlave(Substrate):
    """RedisSlave Substrate description"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = v2mcalm_array_indexcalm_time
    provider_spec_editables = read_spec("specs/RedisSlave_create_spec_editables.yaml")
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisMasterAWS(Substrate):
    """RedisMasterAWS Substrate description"""

    os_type = "Linux"
    provider_type = "AWS_VM"
    provider_spec = read_provider_spec("specs/RedisMasterAWS_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisMasterAWS_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{public_ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisSlaveAWS(Substrate):
    """RedisSlaveAWS Substrate description"""

    os_type = "Linux"
    provider_type = "AWS_VM"
    provider_spec = read_provider_spec("specs/RedisSlaveAWS_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisSlaveAWS_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{public_ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisGCPMaster(Substrate):
    """RedisGCPMaster Substrate description"""

    os_type = "Linux"
    provider_type = "GCP_VM"
    provider_spec = read_provider_spec("specs/RedisGCPMaster_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisGCPMaster_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.networkInterfaces[0].accessConfigs[0].natIP}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisGCPSlave(Substrate):
    """RedisGCPSlave Substrate description"""

    os_type = "Linux"
    provider_type = "GCP_VM"
    provider_spec = read_provider_spec("specs/RedisGCPSlave_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisGCPSlave_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.networkInterfaces[0].accessConfigs[0].natIP}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisMasterAzure(Substrate):
    """RedisMasterAzure Substrate description"""

    os_type = "Linux"
    provider_type = "AZURE_VM"
    provider_spec = read_provider_spec("specs/RedisMasterAzure_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisMasterAzure_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.publicIPAddressList[0]}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisSlaveAzure(Substrate):
    """RedisSlaveAzure Substrate description"""

    os_type = "Linux"
    provider_type = "AZURE_VM"
    provider_spec = read_provider_spec("specs/RedisSlaveAzure_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisSlaveAzure_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.publicIPAddressList[0]}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisMasterVMWare(Substrate):
    """RedisMasterVMWare Substrate description"""

    os_type = "Linux"
    provider_type = "VMWARE_VM"
    provider_spec = read_vmw_spec("specs/RedisMasterVMWare_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisMasterVMWare_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.ipAddressList[0]}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class RedisSlaveVMWare(Substrate):
    """RedisSlaveVMWare Substrate description"""

    os_type = "Linux"
    provider_type = "VMWARE_VM"
    provider_spec = read_vmw_spec("specs/RedisSlaveVMWare_provider_spec.yaml")
    provider_spec_editables = read_spec(
        "specs/RedisSlaveVMWare_create_spec_editables.yaml"
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.ipAddressList[0]}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CENTOS),
    )


class Redis_Slave(Service):
    """Redis_Slave Service description"""

    dependencies = [ref(Redis_Master)]


class RedisMasterPackage(Package):
    """RedisMasterPackage Package description"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_RedisMasterPackage_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackage),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisMasterPackage_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackage),
        )


class RedisMasterPackageAWS(Package):
    """RedisMasterPackageAWS Package description"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis  Master Install and Configure",
            filename="scripts/Package_RedisMasterPackageAWS_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackageAWS),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisMasterPackageAWS_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisMasterPackageAWS),
        )


class RedisMasterGCPPackage(Package):
    """RedisMasterGCPPackage Package description"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_RedisMasterGCPPackage_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class PackageMasterAZure(Package):
    """PackageMasterAZure Package description"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_PackageMasterAZure_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class PackageMasterVMWare(Package):
    """PackageMasterVMWare Package description"""

    services = [ref(Redis_Master)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Master Install and Configure",
            filename="scripts/Package_PackageMasterVMWare_Action___install___Task_RedisMasterInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Master),
        )


class RedisSlavePackage(Package):
    """RedisSlavePackage Package description"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlavePackage_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackage),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisSlavePackage_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackage),
        )


class RedisSlavePackageAWS(Package):
    """RedisSlavePackageAWS Package description"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlavePackageAWS_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackageAWS),
        )

    @action
    def __uninstall__():
        """__uninstall__ Action description"""

        CalmTask.Exec.ssh(
            name="PackageUninstallTask",
            filename="scripts/Package_RedisSlavePackageAWS_Action___uninstall___Task_PackageUninstallTask.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(RedisSlavePackageAWS),
        )


class RedisSlaveGCPPackage(Package):
    """RedisSlaveGCPPackage Package description"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_RedisSlaveGCPPackage_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class PackageSlaveAZure(Package):
    """PackageSlaveAZure Package description"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_PackageSlaveAZure_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class PackageSlaveVMWare(Package):
    """PackageSlaveVMWare Package description"""

    services = [ref(Redis_Slave)]

    @action
    def __install__():
        """__install__ Action description"""

        CalmTask.Exec.ssh(
            name="Redis Slave Install and Configure",
            filename="scripts/Package_PackageSlaveVMWare_Action___install___Task_RedisSlaveInstallandConfigure.sh",
            cred=ref(BP_CRED_CENTOS),
            target=ref(Redis_Slave),
        )


class _8b347ab3_deployment(Deployment):
    """_8b347ab3_deployment Deployment description"""

    display_name = "8b347ab3_deployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterPackage)]
    substrate = ref(RedisMaster)


class _14ac6f34_deployment(Deployment):
    """_14ac6f34_deployment Deployment description"""

    display_name = "14ac6f34_deployment"
    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterPackageAWS)]
    substrate = ref(RedisMasterAWS)


class fca6ffcc_deployment(Deployment):
    """fca6ffcc_deployment Deployment description"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(RedisMasterGCPPackage)]
    substrate = ref(RedisGCPMaster)


class ab643c16_deployment(Deployment):
    """ab643c16_deployment Deployment description"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(PackageMasterAZure)]
    substrate = ref(RedisMasterAzure)


class ab643c16_deployment_cloned_0(Deployment):
    """ab643c16_deployment_cloned_0 Deployment description"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(PackageMasterVMWare)]
    substrate = ref(RedisMasterVMWare)


class _4f977866_deployment(Deployment):
    """_4f977866_deployment Deployment description"""

    display_name = "4f977866_deployment"
    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlavePackage)]
    substrate = ref(RedisSlave)


class acc663db_deployment(Deployment):
    """acc663db_deployment Deployment description"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlavePackageAWS)]
    substrate = ref(RedisSlaveAWS)


class _76aecbee_deployment(Deployment):
    """_76aecbee_deployment Deployment description"""

    display_name = "76aecbee_deployment"
    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(RedisSlaveGCPPackage)]
    substrate = ref(RedisGCPSlave)


class ee6d01cf_deployment(Deployment):
    """ee6d01cf_deployment Deployment description"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(PackageSlaveAZure)]
    substrate = ref(RedisSlaveAzure)


class ee6d01cf_deployment_cloned_0(Deployment):
    """ee6d01cf_deployment_cloned_0 Deployment description"""

    min_replicas = "2"
    max_replicas = "4"

    packages = [ref(PackageSlaveVMWare)]
    substrate = ref(RedisSlaveVMWare)


class Nutanix(Profile):
    """Nutanix Profile description"""

    deployments = [_8b347ab3_deployment, _4f977866_deployment]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Nutanix_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        Scaleout = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{Scaleout}@@", name="Scaleout", target=ref(_4f977866_deployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(_4f977866_deployment)
        )


class AWS(Profile):
    """AWS Profile description"""

    deployments = [_14ac6f34_deployment, acc663db_deployment]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_AWS_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(acc663db_deployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(acc663db_deployment)
        )


class GCP(Profile):
    """GCP Profile description"""

    deployments = [fca6ffcc_deployment, _76aecbee_deployment]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_GCP_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        ScaleOut = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_out(
            "@@{ScaleOut}@@", name="ScaleOut", target=ref(_76aecbee_deployment)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        ScaleIn = CalmVariable.Simple(
            "1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Scaling.scale_in(
            "@@{ScaleIn}@@", name="ScaleIn", target=ref(_76aecbee_deployment)
        )


class Azure(Profile):
    """Azure Profile description"""

    deployments = [ab643c16_deployment, ee6d01cf_deployment]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_Azure_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        CalmTask.Scaling.scale_out("1", name="Task1", target=ref(ee6d01cf_deployment))

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        CalmTask.Scaling.scale_in("1", name="Task1", target=ref(ee6d01cf_deployment))


class VMware(Profile):
    """VMware Profile description"""

    deployments = [ab643c16_deployment_cloned_0, ee6d01cf_deployment_cloned_0]

    REDIS_CONFIG_PASSWORD = CalmVariable.Simple.Secret(
        Profile_VMware_variable_REDIS_CONFIG_PASSWORD,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def ScaleOut():
        """This action will scale out Redis slaves by given scale out count
    """

        CalmTask.Scaling.scale_out(
            "1", name="ScaleOut", target=ref(ee6d01cf_deployment_cloned_0)
        )

    @action
    def ScaleIn():
        """This action will scale in Redis slaves by given scale in count
    """

        CalmTask.Scaling.scale_in(
            "1", name="ScaleIn", target=ref(ee6d01cf_deployment_cloned_0)
        )


class Redis_Cluster(Blueprint):
    """Accessibility:
* redis-cli from master host"""

    services = [Redis_Master, Redis_Slave]
    packages = [
        RedisMasterPackage,
        RedisSlavePackage,
        RedisMasterPackageAWS,
        RedisSlavePackageAWS,
        AHV_CENTOS_77,
        RedisMasterGCPPackage,
        RedisSlaveGCPPackage,
        PackageMasterAZure,
        PackageSlaveAZure,
        ESX_CENTOS_77,
        PackageMasterVMWare,
        PackageSlaveVMWare,
    ]
    substrates = [
        RedisMaster,
        RedisSlave,
        RedisMasterAWS,
        RedisSlaveAWS,
        RedisGCPMaster,
        RedisGCPSlave,
        RedisMasterAzure,
        RedisSlaveAzure,
        RedisMasterVMWare,
        RedisSlaveVMWare,
    ]
    profiles = [Nutanix, AWS, GCP, Azure, VMware]
    credentials = [BP_CRED_CENTOS]
